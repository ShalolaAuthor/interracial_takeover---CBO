#bno_on_declared_war
#bno_house_feud_start_effect

bno_on_declared_war = {
	###############################
	##### Attacker music
	###############################
	if = {
		limit = {
			exists = scope:war # silence error when building description before war exists
			scope:war = { using_holy_war_cb_trigger = yes } # going CB->war->is this war's CB a certain type->yes
		}
		scope:attacker = { play_music_cue = mx_cue_crusade_starts }
	}
	else_if = {
		limit = {
			exists = scope:war
			has_mpo_dlc_trigger = yes
			OR = {
				scope:attacker = {
					government_has_flag = government_is_nomadic
			  		any_character_situation = {
			  			this = situation:the_great_steppe
			  		}
				}
				scope:defender = {
					government_has_flag = government_is_nomadic
			  		any_character_situation = {
			  			this = situation:the_great_steppe
			  		}
				}
			}
		}
		scope:attacker = { play_music_cue = mx_cue_the_khans_glory }
	}
	else_if = {
		limit = {
			exists = scope:war
			OR = {
				scope:attacker = { fp3_character_any_involvement_persian_struggle_trigger = yes }
				scope:defender = { fp3_character_any_involvement_persian_struggle_trigger = yes }
			}
		}
		scope:attacker = { play_music_cue = strugglewar_cue }
	}
	else_if = {
		limit = {
			exists = scope:war
			OR = {
				scope:attacker = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
				scope:defender = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
			}
		}
		scope:attacker = { play_music_cue = mx_IberiaWar }
	}
	else_if = {
		limit = {
			exists = scope:war
			scope:attacker = { fp1_is_norse_tribal = yes }
		}
		scope:attacker = { play_music_cue = mx_raid }
	}
	else = {
		scope:attacker = { play_music_cue = mx_cue_war_declared }
	}
	###############################
	##### Defender music
	###############################
	if = {
		limit = {
			exists = scope:war
			OR = {
				scope:attacker = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
				scope:defender = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
			}
		}
		scope:defender = { play_music_cue = mx_IberiaWar }
	}
	else_if = {
		limit = {
			exists = scope:war
			has_mpo_dlc_trigger = yes
			OR = {
				scope:attacker = {
					government_has_flag = government_is_nomadic
			  		any_character_situation = {
			  			this = situation:the_great_steppe
			  		}
				}
				scope:defender = {
					government_has_flag = government_is_nomadic
			  		any_character_situation = {
			  			this = situation:the_great_steppe
			  		}
				}
			}
		}
		scope:defender = { play_music_cue = mx_cue_the_khans_glory }
	}
	else_if = {
		limit = {
			exists = scope:war
			OR = {
				scope:attacker = { fp3_character_any_involvement_persian_struggle_trigger = yes }
				scope:defender = { fp3_character_any_involvement_persian_struggle_trigger = yes }
			}
		}
		scope:defender = { play_music_cue = strugglewar_cue }
	}
	else_if = {
		limit = {
			exists = scope:war
			scope:attacker = { fp1_is_norse_tribal = yes }
		}
		scope:defender = { play_music_cue = mx_raid }
	}

	else = {
		scope:defender = {
			play_music_cue = mx_cue_war_declared
		}
	}

	###############################
	##### Effects
	###############################

	#There is no fighting in the admin room!
	if = {
		limit = {
			scope:attacker = {
				OR = {
					government_has_flag = government_is_feudal
					government_has_flag = government_is_clan
					government_has_flag = government_is_tribal
				}			
				liege ?= {
					government_has_flag = government_is_administrative
				}
			}
			scope:defender = {
				government_has_flag = government_is_administrative
				liege ?= scope:attacker.liege
			}
		}
		custom_description_no_bullet = {
			text = on_declared_war_in_admin
		}
		scope:attacker.liege = {
			add_opinion = {
				target = scope:attacker
				modifier = declared_war_in_admin
			}
		}
	}

	# Breaking Truce
	if = {
		limit = {
			scope:attacker = {
				has_truce = scope:defender
			}
		}
		scope:attacker = {
			custom_description_no_bullet = {
				text = attack_breaking_truce_text
			}

			# Remove the war target from the bought_truce_list if they're in it
			if = {
				limit = {
					has_purchased_truce_with_char = { TARGET = scope:defender }
				}
				remove_list_variable = {
					name = bought_truce_list
					target = scope:recipient
				}
			}

			if = {
				limit = {
					NOT = { has_perk = flexible_truces_perk }
				}
				add_prestige = break_truce_prestige_loss
				add_prestige_level = break_truce_prestige_level_loss
			}
			add_legitimacy = {
				value = medium_legitimacy_loss
				multiply = primary_title.tier
			}
			add_character_modifier = {
				modifier = broke_truce
				years = 3
			}

			# Struggle Catalysts.
			if = {
				limit = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_broke_truce_against_important_character
							CHAR = scope:defender
						}
					}
				}
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_broke_truce_against_important_character
							CHAR = scope:defender
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_broke_truce_against_important_character
						character = scope:attacker
					}
				}
			}
		}
	}
	# Breaking Betrothals
	if = {
		limit = {
			scope:attacker = {
				is_allied_to = scope:defender
				any_close_family_member = {
					court_owner = scope:attacker
					is_betrothed = yes
					betrothed = {
						court_owner = scope:defender
						is_close_family_of = scope:defender
					}
				}
			}
		}
		scope:attacker = {
			custom_description_no_bullet = {
				text = attack_breaking_betrothal_text
			}
			add_prestige = {
				value = break_truce_prestige_loss
				multiply = break_betrothal_prestige_cost
			}
			#Did you promise a grand wedding?
			if = {
				limit = {
					has_variable = promised_grand_wedding_marriage_countdown
					any_close_family_member = {
						court_owner = scope:attacker
						is_betrothed = yes
						has_been_promised_grand_wedding = yes
						betrothed = {
							court_owner = scope:defender
							is_close_family_of = scope:defender
							has_been_promised_grand_wedding = yes
						}
					}
				}
				random_close_family_member = {
					limit = {
						court_owner = scope:attacker
						is_betrothed = yes
						has_been_promised_grand_wedding = yes
						betrothed = {
							court_owner = scope:defender
							is_close_family_of = scope:defender
							has_been_promised_grand_wedding = yes
						}
					}
					save_scope_as = victim
				}
				#Start a house feud, if possible.
				if = {
					limit = {
						has_dlc_feature = friends_and_foes
						exists = scope:attacker.house.house_head
						exists = scope:defender.house.house_head
						NOT = { scope:attacker.house = scope:defender.house}
					}
					bno_house_feud_start_effect = {
						#Feuding House Head
						ACTOR = scope:attacker.house.house_head
						#Target House Head
						TARGET = scope:defender.house.house_head
						#Feud Reason
						REASON = family_broke_gw_betrothal
						#House Member attacker if relevant
						ATTACKER = scope:attacker
						#House Member victim if relevant
						VICTIM = scope:victim
					}
				}
				#Then remove promise
				remove_variable = promised_grand_wedding_marriage_countdown
			}
			every_close_family_member = {
				limit = {
					court_owner = scope:attacker
					is_betrothed = yes
					betrothed = {
						court_owner = scope:defender
						is_close_family_of = scope:defender
					}
				}
				break_betrothal = betrothed
			}
		}
	}
	# Breaking Alliance
	else_if = {
		limit = {
			scope:attacker = {
				is_allied_to = scope:defender
			}
		}
		scope:attacker = {
			break_alliance_due_to_attack_effect = { TARGET = scope:defender }
		}
	}
	# Breaking Tributary
	if = {
		limit = {
			OR = {
				scope:attacker = { is_tributary_of = scope:defender	}
				scope:defender = { is_tributary_of = scope:attacker	}
			}
		}
		scope:attacker = {
			bno_break_tributary_contract_due_to_attack_effect = { DEFENDER = scope:defender }
		}
	}
	# BP2: Attacking Warden
	if = {
		limit = {
			scope:attacker = {
				any_home_court_hostage = { is_hostage_of = scope:defender }
			}
		}
		scope:attacker = {
			add_prestige = break_truce_prestige_loss
			add_prestige_level = break_truce_prestige_level_loss
			add_character_modifier = {
				modifier = attacked_warden
				years = 5
			}
			# Hostages they hold (yours)
			every_home_court_hostage = {
				save_scope_as = hostage
				every_close_family_member = {
					limit = {
						NOT = { this = scope:attacker }
					}
					custom = attacked_warden_tt
					add_opinion = {
						modifier = attacked_warden
						target = scope:attacker
					}
				}
				if = {
					limit = { is_hostage_of = scope:defender }
					custom_description_no_bullet = {
						text = attack_breaking_truce_hostage
						subject = scope:defender
						object = scope:hostage
					}
				}
			}
		}
	}
	# BP2: Attacking Home Court
	if = {
		limit = {
			scope:attacker = {
				any_warden_hostage = { is_hostage_from = scope:defender }
			}
		}
		scope:attacker = {
			# Hostages you hold (theirs)
			every_warden_hostage = {
				save_scope_as = hostage
				if = {
					limit = { is_hostage_from = scope:defender }
					custom_description_no_bullet = {
						text = attack_breaking_truce_hostage
						subject = scope:attacker
						object = scope:hostage
					}
				}
			}
			add_prestige = break_truce_prestige_loss
			add_prestige_level = break_truce_prestige_level_loss
			add_character_modifier = {
				modifier = attacked_home_court
				years = 5
			}
			# Hostages they hold (yours)
			every_home_court_hostage = {
				save_scope_as = hostage
				every_close_family_member = {
					limit = {
						NOT = { this = scope:attacker }
					}
					custom = attacked_warden_tt
					add_opinion = {
						modifier = attacked_home_court
						target = scope:attacker
					}
				}
				if = {
					limit = { is_hostage_of = scope:defender }
					custom_description_no_bullet = {
						text = attack_breaking_truce_hostage
						subject = scope:defender
						object = scope:hostage
					}
				}
			}
		}
	}

	# Opinion
	scope:defender = {
		add_opinion = {
			target = scope:attacker
			modifier = declared_war
		}
	}
	if = {
		limit = {
			NOT = {
				scope:attacker = {
					is_parent_of = scope:defender
				}
			}
		}
		if = {
			limit = {
				scope:defender = {
					has_father = yes
				}
			}
			scope:defender = {
				father = {
					add_opinion = {
						target = scope:attacker
						modifier = declared_war_on_son_daughter
					}
				}
			}
		}
		if = {
			limit = {
				scope:defender = {
					has_mother = yes
				}
			}
			scope:defender = {
				mother = {
					add_opinion = {
						target = scope:attacker
						modifier = declared_war_on_son_daughter
					}
				}
			}
		}
	}
	if = {
		limit = {
			NOT = { scope:attacker.culture = scope:defender.culture }
			scope:attacker = { is_landed = yes }
			scope:defender = { is_landed = yes }
		}
		scope:defender.culture = {
			change_cultural_acceptance = {
				target = scope:attacker.culture
				value = declare_war_culture_acceptance_impact
				desc = cultural_acceptance_loss_declared_war
			}
		}
	}
	
	scope:attacker = {
		if = {
			limit = {
				any_vassal = {
					has_vassal_stance = parochial
				}
				eighty_percent_of_current_military_strength <= scope:defender.current_military_strength
			}
			custom_tooltip = parochial_vassal_disapproves_war
			hidden_effect = {
				every_vassal = {
					limit = {
						has_vassal_stance = parochial
					}
					add_opinion = {
						target = scope:attacker
						modifier = parochial_disapproves_strong_war_enemy_opinion
					}
				}
			}
		}
	}
	
	# If we're a clan this interaction affects unity
	add_clan_unity_interaction_effect = {
		CHARACTER = scope:attacker
		TARGET = scope:defender
		VALUE = massive_unity_loss
		DESC = clan_unity_declared_war.desc
		REVERSE_NON_HOUSE_TARGET = no
	}
	
	intrigue_duel_on_attack_effect = yes
}

# Start Feud, set variables, modifiers, relations, and stress
bno_house_feud_start_effect = {
	# Save scopes
	$ACTOR$.house.house_head = { save_scope_as = starter_house_head }
	$TARGET$.house.house_head = { save_scope_as = house_feud_rival }
	$ATTACKER$ = { save_scope_as = house_feud_attacker }
	$VICTIM$ = { save_scope_as = house_feud_victim }
	# Save target House for reference
	$ATTACKER$ = {
		set_variable = {
			name = house_feud_house
			value = $TARGET$.house
		}
	}
	# Explanatory Tooltips
	if = {
		limit = {
			NOT = {
				$TARGET$.house.house_head = {
					any_owned_story = {
						story_type = story_cycle_house_feud
						var:house_feud_house ?= scope:attacker.house
					}
				}
			}
		}
		custom_tooltip = story_cycle_house_feud_tt
	}
	else = { custom_tooltip = story_cycle_house_feud_reciprocate_tt }
	# Relations: Nemesis if already Rivals, else Rival
	if = {
		limit = {
			has_relation_rival = $TARGET$.house.house_head
			NOT = { has_relation_nemesis = $TARGET$.house.house_head }
			can_set_relation_nemesis_trigger = { CHARACTER = $TARGET$.house.house_head }
		}
		set_relation_nemesis = {
			reason = nemesis_house_feud
			copy_reason = rival
			target = $TARGET$.house.house_head
		}
	}
	else_if = {
		limit = {
			NOT = { has_relation_rival = $TARGET$.house.house_head }
		}
		set_relation_rival = {
			target = $TARGET$.house.house_head
			reason = rival_house_feud_start_of_feud
		}
	}
	# Reduce opinion of Feud target if relevant
	if = {
		limit = { is_ai = no }
		add_opinion = {
			target = $TARGET$.house.house_head
			modifier = house_feud_opinion
		}
	}
	# Add House modifier and tooltip explaining Scheme bonus
	show_as_tooltip = {
		house = {
			add_house_modifier = { modifier = house_feud_story_modifier }
		}
	}
	# Stress
	stress_impact = { vengeful = minor_stress_impact_loss }
	house_feud_forgiving_stress_effect = yes
	# Create Story Cycle
	create_story = story_cycle_house_feud
	# Save reasons for reference
	random_owned_story = {
		limit = { story_type = story_cycle_house_feud }
		set_variable = house_feud_setup
		# Save Feud target House
		set_variable = { name = house_feud_house value = scope:house_feud_rival.house }
		# Save Feud rival
		set_variable = { name = house_feud_rival value = scope:house_feud_rival }
		# Save Feud attacker
		set_variable = { name = house_feud_attacker value = scope:house_feud_attacker }
		# Save Feud attacker
		set_variable = { name = house_feud_victim value = scope:house_feud_victim }
		# Save Feud starter
		set_variable = { name = house_feud_first_owner value = scope:starter_house_head }
		# Save first Feud target House Head
		set_variable = { name = house_feud_first_rival value = scope:house_feud_rival }
		# Save feud length counter
		set_variable = { name = house_feud_length_counter value = 0 }
		# Save feud death counter
		set_variable = { name = house_feud_death_counter value = 0 }
		# Save feud kill counter
		set_variable = { name = house_feud_kill_counter value = 0 }
		# Save start reason flavor
		set_variable = { name = house_feud_reason value = flag:$REASON$ }

		# Move starting death counter if relevant
		if = {
			limit = {
				OR = {
					var:house_feud_reason = flag:head_killed
					var:house_feud_reason = flag:family_killed					
				}
			}
			change_variable = {
				name = house_feud_death_counter
				add = house_feud_medium_counter_value
			}
		}
		else_if = {
			limit = {
				OR = {
					var:house_feud_reason = flag:head_cuckolded
					var:house_feud_reason = flag:family_cuckolded
				}
			}
			change_variable = {
				name = house_feud_death_counter
				add = house_feud_small_counter_value
			}
		}
		# Save title for flavor if relevant
		else_if = {
			limit = { var:house_feud_reason = flag:competing_claim }
			if = {
				limit = {
					NOT = { exists = scope:house_feud_claim }
				}
				scope:house_feud_victim = {
					ordered_claim = {
						limit = {
							any_claimant = { this = scope:house_feud_attacker }
						}
						order_by = tier
						save_scope_as = house_feud_claim
					}
				}
			}
			set_variable = { name = house_feud_title value = scope:house_feud_claim }
		}
		# Granular torture reasons if revelant
		else_if = {
			limit = { var:house_feud_reason = flag:head_tortured }
			if = {
				limit = {
					scope:house_feud_victim = { has_character_flag = house_feud_blinding_flag }
				}
				set_variable = { name = house_feud_reason value = flag:head_blinded }
			}
			else_if = {
				limit = {
					scope:house_feud_victim = { has_character_flag = house_feud_castration_flag }
				}
				set_variable = { name = house_feud_reason value = flag:head_castrated }
			}
		}
		else_if = {
			limit = { var:house_feud_reason = flag:family_tortured }
			if = {
				limit = {
					scope:house_feud_victim = { has_character_flag = house_feud_blinding_flag }
				}
				set_variable = { name = house_feud_reason value = flag:family_blinded }
			}
			else_if = {
				limit = {
					scope:house_feud_victim = { has_character_flag = house_feud_castration_flag }
				}
				set_variable = { name = house_feud_reason value = flag:family_castrated }
			}
		}
		# Save cuckold spouse if relevant
		else_if = {
			limit = { var:house_feud_reason = flag:head_cuckolded }
			if = {
				limit = {
					NOT = { exists = scope:house_feud_spouse }
				}
				scope:house_feud_victim = {
					random_spouse = { save_scope_as = house_feud_spouse }
				}
			}
			set_variable = { name = house_feud_spouse value = scope:house_feud_spouse }
		}
		# Set house betrothal broken reason if relevant
		else_if = {
			limit = { var:house_feud_reason = flag:family_broke_gw_betrothal }
			if = {
				limit = { scope:starter_house_head = scope:house_feud_victim }
				set_variable = { name = house_feud_reason value = flag:head_broke_gw_betrothal }
			}
		}
		save_scope_as = story
		# Invalidate exit
		if = {
			limit = {
				OR = {
					NOT = { exists = var:house_feud_house }
					NOT = { exists = var:house_feud_first_owner }
					NOT = { exists = var:house_feud_first_rival }
					NOT = { exists = var:house_feud_length_counter }
					NOT = { exists = var:house_feud_death_counter }
					NOT = { exists = var:house_feud_kill_counter }
					NOT = { exists = var:house_feud_reason }
				}
			}
			# Variable is missing! Ending story prematurely.
			debug_log = "House Feud invalidated"
			debug_log_scopes = yes
			end_story = yes
		}
		house_feud_memory_effect = yes
		# Inform House Members feud has started
		story_owner.house = {
			every_house_member = {
				limit = { is_ai = no }
				# Explanatory Tooltips
				if = {
					limit = {
						NOT = {
							$TARGET$.house.house_head = {
								any_owned_story = {
									story_type = story_cycle_house_feud
									var:house_feud_house ?= scope:attacker.house
								}
							}
						}
					}
					send_interface_message = {
						type = house_feud_begins_message
						left_icon = scope:story.story_owner
						right_icon = scope:story.var:house_feud_rival
						show_as_tooltip = {
							house.house_head = {
								#Show as tooltip does not require a reason
								if = {
									limit = { has_relation_nemesis = scope:story.var:house_feud_rival }
									set_relation_nemesis = scope:story.var:house_feud_rival
								}
								else = { set_relation_rival = scope:story.var:house_feud_rival }
							}
						}
					}
				}
				else = {
					send_interface_message = {
						type = house_feud_reciprocated_message
						left_icon = scope:story.story_owner
						right_icon = scope:story.var:house_feud_rival
						show_as_tooltip = {
							house.house_head = {
								#Show as tooltip does not require a reason
								if = {
									limit = { has_relation_nemesis = scope:story.var:house_feud_rival }
									set_relation_nemesis = scope:story.var:house_feud_rival
								}
								else = { set_relation_rival = scope:story.var:house_feud_rival }
							}
						}
					}
				}
				trigger_event = {
					id = bp1_house_feud.0600
					days = 5
				}
			}
		}
		story_owner = {
			add_character_flag = had_house_feud_story
			house = {
				add_house_modifier = {
					modifier = house_feud_story_modifier
					desc = house_feud_story_modifier_custom_desc
				}
			}
		}
		# Chance to inform target House Head, who can reciprocate
		story_owner = { save_scope_as = house_feud_attacker }
		var:house_feud_house.house_head = {
			trigger_event = {
				id = bp1_house_feud.0501
				months = { 1 2 }
			}
		}
		remove_variable = house_feud_setup
	}
}

bno_break_tributary_contract_due_to_attack_effect = {
	save_scope_as = attacker
	if = {
		limit = { is_tributary_of = $DEFENDER$ }
		custom_description_no_bullet = { text = attack_suzerain_text }
		reverse_add_opinion = {
			modifier = tributary_ceased_payments_opinion
			target = $DEFENDER$
		}
		$DEFENDER$ = {
			send_interface_toast = {
				type = msg_tributary_contract_broken_due_to_war
				left_icon = $DEFENDER$
				right_icon = scope:attacker
			}
		}
		send_interface_toast = {
			type = msg_tributary_contract_broken_due_to_war
			left_icon = scope:attacker
			right_icon = $DEFENDER$
		}
		end_tributary = yes
	}
	else = {
		reverse_add_opinion = {
			modifier = betrayal_opinion
			target = $DEFENDER$
			opinion = -50
		}
		send_interface_toast = {
			type = msg_tributary_contract_broken_due_to_war
			left_icon = scope:attacker
			right_icon = $DEFENDER$
		}
		$DEFENDER$ = {
			send_interface_toast = {
				type = msg_tributary_contract_broken_due_to_war
				left_icon = $DEFENDER$
				right_icon = scope:attacker
			}
			end_tributary = yes
		}
	}
}

bno_found_cadet_house_decision_effect = {
	hidden_effect = {
		house.house_head = {
			save_scope_as = former_house_head
		}
		house = {
			save_scope_as = former_house
		}
		add_achievement_flag_effect = { FLAG = achievement_a_house_of_my_own_flag }
	}

	create_cadet_branch = yes
	add_prestige = $PRESTIGE$
	hidden_effect = {
		save_scope_as = new_head
		house = {
			save_scope_as = new_house
		}
		every_player = {
			limit = {
				exists = house
				house = scope:new_house
				NOT = { this = $CHARACTER$ }
			}
			send_interface_toast = {
				type = msg_created_new_house
				title = created_cadet_branch_toast_new_house_desc
				left_icon = scope:new_head
				desc = created_cadet_branch_toast_new_house_other_tt
			}
		}
		send_interface_toast = {
			type = msg_created_new_house
			title = created_cadet_branch_toast_new_house_desc
			left_icon = scope:new_head
			right_icon = scope:former_house_head
			desc = created_cadet_branch_toast_new_house_other_tt
		}
		if = {
			limit = {
				any_child = {
					has_trait = bastard
					is_lowborn = no
					dynasty = scope:new_head.dynasty
					NOT =  { house = scope:new_house }
				}
			}
			every_child = {
				limit = {
					has_trait = bastard
					is_lowborn = no
					dynasty = scope:new_head.dynasty
					NOT =  { house = scope:new_house }
				}
				set_house = scope:new_house
			}
		}
		if = {
			limit = {
				any_artifact = {
					trigger_if = {
						limit = { exists = var:banner_dynasty }
						var:banner_dynasty = scope:attacker.dynasty
					}
					trigger_else = { always = no }
                    artifact_owner = {
						NOT = { this = root }
						in_diplomatic_range = root
					}
					NOT = {
						any_artifact_house_claimant = {
							this = scope:new_house
						}
					}
				}
			}
			random_artifact = {
				limit = {
					exists = var:banner_dynasty
					var:banner_dynasty = scope:attacker.dynasty
					artifact_owner = { in_diplomatic_range = root }
					NOT = {
						any_artifact_house_claimant = {
							this = scope:new_house
						}
					}
				}
				save_scope_as = new_branch_dynasty_banner
			}
			scope:new_house = {
				add_house_artifact_claim = scope:new_branch_dynasty_banner
			}
		}

		# Struggle Catalysts
		if = {
			limit = {
				scope:attacker =  {
					exists = house
					exists = house.house_head
					any_character_struggle	 = {
						involvement = involved
						phase_has_catalyst = catalyst_cadet_branch_created
					}
				}
			}
			every_character_struggle = {
				involvement = involved
				activate_struggle_catalyst = {
					catalyst = catalyst_cadet_branch_created
					character = root
				}
				log_debug_variable_for_persian_struggle_effect = { VAR = unrest_catalyst_cadet_branch_created }
			}
		}
	}
}